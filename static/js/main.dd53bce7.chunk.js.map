{"version":3,"sources":["Persons/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","className","onClick","click","name","age","children","type","onChange","change","App","state","Persons","switchNameHandler","newName","setState","nameChangeHandler","event","target","value","this","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAceA,G,YAVA,SAACC,GAChB,OACI,yBAAKC,UAAU,WACf,uBAAGC,QAASF,EAAMG,OAAlB,cAAqCH,EAAMI,KAA3C,aAA2DJ,EAAMK,IAAjE,eACA,2BAAIL,EAAMM,UACV,2BAAOC,KAAK,OAAOC,SAAUR,EAAMS,YCsCxBC,E,2MAzCbC,MAAQ,CACNC,QAAU,CACR,CAAER,KAAM,QAASC,IAAK,IACtB,CAAED,KAAM,MAAOC,IAAK,IACpB,CAAED,KAAM,OAAQC,IAAK,M,EAIzBQ,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZH,QAAU,CACR,CAAER,KAAMU,EAAST,IAAK,IACtB,CAAED,KAAM,aAAcC,IAAK,IAC3B,CAAED,KAAM,aAAcC,IAAK,Q,EAKjCW,kBAAoB,SAACC,GACnB,EAAKF,SAAS,CACZH,QAAS,CACP,CAAER,KAAM,QAASC,IAAK,IACtB,CAAED,KAAMa,EAAMC,OAAOC,MAAOd,IAAK,IACjC,CAAED,KAAM,QAASC,IAAK,Q,wEAM1B,OACE,yBAAKJ,UAAU,OACf,8CACA,4BAAQC,QAASkB,KAAKP,kBAAkBQ,KAAKD,KAAK,WAAlD,gBACA,kBAAC,EAAD,CAAQhB,KAAMgB,KAAKT,MAAMC,QAAQ,GAAGR,KAAMC,IAAKe,KAAKT,MAAMC,QAAQ,GAAGP,IAAKF,MAAOiB,KAAKP,kBAAkBQ,KAAKD,KAAK,WAClH,kBAAC,EAAD,CAAQhB,KAAMgB,KAAKT,MAAMC,QAAQ,GAAGR,KAAMC,IAAKe,KAAKT,MAAMC,QAAQ,GAAGP,IAAKI,OAAQW,KAAKJ,mBAAvF,sBACA,kBAAC,EAAD,CAAQZ,KAAMgB,KAAKT,MAAMC,QAAQ,GAAGR,KAAMC,IAAKe,KAAKT,MAAMC,QAAQ,GAAGP,W,GApCzDiB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dd53bce7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\n\r\n\r\nconst person = (props) => {\r\nreturn (\r\n    <div className=\"Persons\">\r\n    <p onClick={props.click}>My name is {props.name} and i am {props.age} years old.</p>\r\n    <p>{props.children}</p>\r\n    <input type=\"text\" onChange={props.change}/>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Persons/Person';\n\n\nclass App extends Component{\n  state = {\n    Persons : [\n      { name: \"uzair\", age: 28 },\n      { name: \"ali\", age: 30 },\n      { name: \"khan\", age: 60 },\n    ]\n  }\n\n  switchNameHandler = (newName) => {\n    this.setState({\n      Persons : [\n        { name: newName, age: 10 },\n        { name: \"ali haider\", age: 20 },\n        { name: \"khan singh\", age: 40 },\n      ]\n    })\n  }\n\n  nameChangeHandler = (event) => {\n    this.setState({\n      Persons: [\n        { name: \"umair\", age: 10 },\n        { name: event.target.value, age: 20 },\n        { name: \"singh\", age: 40 },\n      ]\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n      <h1>I am react App</h1>\n      <button onClick={this.switchNameHandler.bind(this,'almeer')}>Change State</button>\n      <Person name={this.state.Persons[0].name} age={this.state.Persons[0].age} click={this.switchNameHandler.bind(this,'ayaat')}/>\n      <Person name={this.state.Persons[1].name} age={this.state.Persons[1].age} change={this.nameChangeHandler}>My Hobbies: Racing</Person>\n      <Person name={this.state.Persons[2].name} age={this.state.Persons[2].age} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}